import { brand } from './util/Brand.mjs';
import { allowForCustomOperations } from './Authorization.mjs';

const queryBrand = 'queryCustomOperation';
const mutationBrand = 'mutationCustomOperation';
const subscriptionBrand = 'subscriptionCustomOperation';
const CustomOperationNames = [
    'Query',
    'Mutation',
    'Subscription',
];
function brandedBuilder(builder, brandValue) {
    return { ...builder, ...brand(brandValue) };
}
function _custom(typeName, brand) {
    const data = {
        arguments: {},
        returnType: null,
        functionRef: null,
        authorization: [],
        typeName: typeName,
        handlers: null,
        subscriptionSource: [],
    };
    const builder = brandedBuilder({
        arguments(args) {
            data.arguments = args;
            return this;
        },
        returns(returnType) {
            data.returnType = returnType;
            return this;
        },
        function(functionRefOrName) {
            data.functionRef = functionRefOrName;
            return this;
        },
        authorization(callback) {
            const rules = callback(allowForCustomOperations);
            data.authorization = Array.isArray(rules) ? rules : [rules];
            return this;
        },
        handler(handlers) {
            data.handlers = Array.isArray(handlers)
                ? handlers
                : [handlers];
            return this;
        },
        for(source) {
            data.subscriptionSource = Array.isArray(source) ? source : [source];
            return this;
        },
    }, brand);
    return { ...builder, data };
}
function query() {
    return _custom('Query', queryBrand);
}
function mutation() {
    return _custom('Mutation', mutationBrand);
}
function subscription() {
    return _custom('Subscription', subscriptionBrand);
}

export { CustomOperationNames, mutation, query, subscription };
//# sourceMappingURL=CustomOperation.mjs.map
