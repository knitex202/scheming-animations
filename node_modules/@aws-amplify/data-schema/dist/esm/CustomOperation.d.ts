import { SetTypeSubArg } from '@aws-amplify/data-schema-types';
import { Brand } from './util';
import { ModelField, InternalField } from './ModelField';
import { AllowModifierForCustomOperation, Authorization } from './Authorization';
import { RefType, InternalRef } from './RefType';
import { EnumType, EnumTypeParamShape } from './EnumType';
import { CustomType } from './CustomType';
import type { CustomHandler, FunctionHandler, HandlerType as Handler } from './Handler';
declare const queryBrand = "queryCustomOperation";
declare const mutationBrand = "mutationCustomOperation";
declare const subscriptionBrand = "subscriptionCustomOperation";
type CustomOperationBrand = typeof queryBrand | typeof mutationBrand | typeof subscriptionBrand;
type CustomArguments = Record<string, ModelField<any, any> | EnumType<EnumTypeParamShape>>;
type SubscriptionSource = RefType<any, any>;
type InternalSubscriptionSource = InternalRef;
type CustomReturnType = RefType<any> | CustomType<any>;
type CustomFunctionRefType = string;
type InternalCustomArguments = Record<string, InternalField>;
type InternalCustomReturnType = InternalRef;
type HandlerInputType = FunctionHandler[] | CustomHandler[] | Handler;
export declare const CustomOperationNames: readonly ["Query", "Mutation", "Subscription"];
type CustomOperationName = (typeof CustomOperationNames)[number];
type CustomData = {
    arguments: CustomArguments;
    returnType: CustomReturnType | null;
    functionRef: string | null;
    authorization: Authorization<any, any, any>[];
    typeName: CustomOperationName;
    handlers: Handler[] | null;
    subscriptionSource: SubscriptionSource[];
};
type InternalCustomData = CustomData & {
    arguments: InternalCustomArguments;
    returnType: InternalCustomReturnType;
    functionRef: string | null;
    subscriptionSource: InternalSubscriptionSource[];
    authorization: Authorization<any, any, any>[];
};
export type CustomOperationParamShape = {
    arguments: CustomArguments | null;
    returnType: CustomReturnType | null;
    functionRef: string | null;
    authorization: Authorization<any, any, any>[];
    typeName: CustomOperationName;
    handlers: Handler | null;
};
export type CustomOperation<T extends CustomOperationParamShape, K extends keyof CustomOperation<T> = never, B extends CustomOperationBrand = CustomOperationBrand> = Omit<{
    arguments<Arguments extends CustomArguments>(args: Arguments): CustomOperation<SetTypeSubArg<T, 'arguments', Arguments>, K | 'arguments', B>;
    returns<ReturnType extends CustomReturnType>(returnType: ReturnType): CustomOperation<SetTypeSubArg<T, 'returnType', ReturnType>, K | 'returns', B>;
    /**
     *
     * @deprecated
     * `.function` should no longer be used and will be removed
     * in the next minor version of this package.
     *
     * Use `.handler(a.handler.function())` instead
     */
    function<FunctionRef extends CustomFunctionRefType>(functionRefOrName: FunctionRef): CustomOperation<SetTypeSubArg<T, 'functionRef', FunctionRef>, K | 'function', B>;
    authorization<AuthRuleType extends Authorization<any, any, any>>(callback: (allow: AllowModifierForCustomOperation) => AuthRuleType | AuthRuleType[]): CustomOperation<SetTypeSubArg<T, 'authorization', AuthRuleType[]>, K | 'authorization', B>;
    handler<H extends HandlerInputType>(handlers: H): CustomOperation<T, K | 'handler', B>;
    for<Source extends SubscriptionSource>(source: Source | Source[]): CustomOperation<T['typeName'] extends 'Subscription' ? SetTypeSubArg<T, 'returnType', Source extends SubscriptionSource[] ? Source[number] : Source> : T, K | 'for', B>;
}, K> & Brand<B>;
/**
 * Internal representation of Custom Type that exposes the `data` property.
 * Used at buildtime.
 */
export type InternalCustom<B extends CustomOperationBrand = any> = CustomOperation<any, never, B> & {
    data: InternalCustomData;
};
export type QueryCustomOperation = CustomOperation<CustomOperationParamShape, any, typeof queryBrand>;
export declare function query(): CustomOperation<{
    arguments: null;
    returnType: null;
    functionRef: null;
    authorization: [];
    typeName: 'Query';
    handlers: null;
}, never, typeof queryBrand>;
export type MutationCustomOperation = CustomOperation<CustomOperationParamShape, any, typeof mutationBrand>;
export declare function mutation(): CustomOperation<{
    arguments: null;
    returnType: null;
    functionRef: null;
    authorization: [];
    typeName: 'Mutation';
    handlers: null;
}, never, typeof mutationBrand>;
export type SubscriptionCustomOperation = CustomOperation<CustomOperationParamShape, any, typeof subscriptionBrand>;
export declare function subscription(): CustomOperation<{
    arguments: null;
    returnType: null;
    functionRef: null;
    authorization: [];
    typeName: 'Subscription';
    handlers: null;
}, 'returns', typeof subscriptionBrand>;
export {};
